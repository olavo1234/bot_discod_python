# -*- coding: utf-8 -*-
import math
# import botStatus
# import initialSettings // desativado: env
# import requests // sem requirements
# import asyncio
# import botData // n√£o ativo

from sys import platform
# from discord.ext.commands.errors import MissingRequiredArgument, CommandNotFound




@initialSettings.bot.event
# essa fun√ß√£o iniciar√° o bot
async def on_ready():
    print(f'{initialSettings.bot.user} est√° conectado!')
    # esse m√©todo est√° desativado faz parte do current_time 
    # current_time.start()


@initialSettings.bot.event
async def on_command_error(ctx, error):
    # Esse evento ser√° chamado caso tenha exe√ß√µes
    if isinstance(error, MissingRequiredArgument):
        # Em caso de exe√ß√µes de argumentos
        await ctx.send('Favor enviar todos os Argumentos, mais duvidas comsulte "!?help"')
    elif isinstance(error, CommandNotFound):
        # Em caso de comando n√£o encontrado
        await ctx.send('O comando n√£o existe, mais duvidas comsulte "!?help"')
    else:
        # Ele avisa o erro
        raise error


@initialSettings.bot.event
async def on_message(message):
    if message.author == initialSettings.bot.user:
    # verifica se a mensagem foi mandada pelo bot
    # para evitar loop infinitos
        return
    
    msg = str(message.content).lower().split()
    # ".split()" vai dividir essa frase em um array de palavras 
    for p in msg:
        if p in botData.palavr√µes:
            # E procurar essas palavras no banco de dados atr√°s de palav√µes
            await message.channel.send(
                f'Por favor, {message.author.name}, n√£o ofenda os demais usu√°rios.'
            )
            # E ir√° deletar essa mensagem que inflinge a regra de palavr√µes
            await message.delete()
    # Nesse c√≥digo o bot espera prosessar todos so comandos 
    await initialSettings.bot.process_commands(message)


bot_context = botStatus.BotContext()
# Criar Objeto para gerenciar o status do bot

@initialSettings.bot.command(name='/code', help="Ir√° formatar um texto da caixa normal em c√≥digo")
async def my_command(ctx):
    if ctx.author == initialSettings.bot.user:
        # Vai verificar para ver se as mensagens n√£o s√£o do pr√≥prio bot
        return
    await ctx.send(
        '```Digite abaixo o c√≥digo:```'
        # Pede um input do Usu√°rio 
    )

    # Dentro desse evento tem um segundo evento 
    # que ir√° chamar meu Objeto e mandar a mensagem para o sistema de gerenciamento
    # no botStatus.py na classe RodadaManager
    @initialSettings.bot.event
    async def on_message(message):
        await bot_context.process_message(message)


# Desativado

# @initialSettings.tasks.loop(seconds=5)
# async def current_time():
#     now = initialSettings.datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

#     for guild in initialSettings.bot.guilds:
#         if guild.name in botData.server_channel_mapping:
#             channel_id = botData.server_channel_mapping[guild.name]
#             channel = initialSettings.bot.get_channel(channel_id)
#             if channel:
#                 await channel.send('Data atual: ' + now)
#                 print(f"Enviado para o canal no servidor '{guild.name}'.")
#                 break


@initialSettings.bot.command(name='calculate', help="Vai usar o ambiente python para gerar resultados matem√°ticos")
async def python_interpreter(ctx, *expression):
    # O usu√°rio vai digitar c√≥digo python para realizar calculos
    format_expression = ''.join(expression)
    # para formar uma express√£o se tira todos os espa√ßos
    result = eval(format_expression)
    # se utiliza o "eval" para converter a string em c√≥digo 
    await ctx.send(f'>>> {str(result)}')



@initialSettings.bot.command(name='verificarLocalBot', help="Verificar o OS local de onde o c√≥digo √© rodado")
async def verificar_os(ctx):
    
    windows = 'wind32'
    linux = 'linux'
    
    if platform == windows:
        await ctx.send('O Usu√°rio est√° no Sistema Operacional: Windows')
    elif platform == linux:
        await ctx.send('O Usu√°rio est√° no Sistema Operacional: Linux')
    else:
        await ctx.send('O Usu√°rio est√° em um Sistemas Operacional diferente de Windows e Linux')



# muito complicado para mim
# estudar ponteiros 
@initialSettings.bot.command(name='formPascal', help="Formar um tri√¢ngulo pascal pela sua base")
async def pascalTriangle(ctx, num: int):

    def combination(n, k):
        # C√°lculo iterativo de combina√ß√£o
        result = 1
        for r in range(min(k, n - k)):
            result = result * (n - r) // (r + 1)
        return result

    async def pascals_triangle(rows):
        for row in range(rows):
            answer = ""

            for column in range(row + 1):
                answer += str(combination(row, column)) + " "

            await ctx.send(answer)
    
    await pascals_triangle(num)




@initialSettings.bot.command(help="Mostrar a rela√ß√£o de uma criptomoeda pela base, Coin/Base")
async def binance(ctx, coin, base):
    # try para tentar e estabilizar o bot quando a API n√£o funcionar
    try:
        response = requests.get(f'https://api.binance.com/api/v3/ticker/price?symbol={coin.upper()}{base.upper()}')
        # Se utiliza o API da binance para pegar dados de criptomoedas
        botData = response.json()
        # Chamar todos so dados da API em um json
        price = float(botData.get('price'))
        # E pegar o pre√ßo formatando em float para a formata√ß√£o

        # utilizamos a fun√ß√£o de formata√ß√£o para BRL
        if price:
            await ctx.send(f'O valor do par {coin}/{base} √© {botStatus.formata√ß√£o(price)}')
        else:
            await ctx.send(f'O valor do par {coin}/{base} √© inv√°lido ou incorreto!')
    except Exception as e:
        await ctx.send(f'<{e}> Tente Novamente!')


@initialSettings.tasks.loop(seconds=10)
# Ser√° iniciado um loop pela task do discord
async def current_time_varia_btc():

    try:
        response = requests.get(f'https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT')

        data = response.json()
        price = float(data.get('price'))

        for guild in initialSettings.bot.guilds:
            # Na parte do desenvolvimento servidores s√£o chamados de guilds
            # Nesse caso o loop vai passar por cada servidor onde o bot est√° e so parar√°
            # Quando encontrar um servidor dentro de um dicion√°rio no banco de dados
            if guild.name in botData.server_channel_mapping:
                channel_id = botData.server_channel_mapping[guild.name]
                channel = initialSettings.bot.get_channel(channel_id)
                # Se pega o cannal pelo id 
                if channel:
                    if price:
                        formatted_price = botStatus.formata√ß√£o(price)
                        botStatus.pilha.append(formatted_price)
                        # E utilizamos o send normalmente depois do "get_channel()" 
                        await channel.send(f'Pre√ßo atual do Bitcoin: ${formatted_price}')
                        print(f"Enviado para o canal no servidor '{guild.name}'.")
                    break
    except Exception as e:
        await channel.send(f'<{e}> Tente Novamente!')


@initialSettings.bot.command(name='varia√ß√£oBitcoin', help="monstra a varia√ß√£o do Bitcoin")
async def varia_bitcoin_control(ctx, command_user):
    # Esse bloco de c√≥digo faz parte do "current_time_varia_btc()"
    try:
        str(command_user).lower()
        if command_user == 'start':
            # O usu√°rio ter√° que digitar comandos de start e stop
            current_time_varia_btc.start()
            # Isso far√° a task de loop parar
        
        elif command_user == 'stop':
            current_time_varia_btc.stop()
            # Quando parar vamos esperar um tempo de 10 segundos para enviar todos os dados
            await asyncio.sleep(10)
            # Iremos adicionar todos as varia√ß√µes para uma pilha 
            botStatus.states_BTC_price.append(botStatus.pilha[0])
            # E enviaremos o primeiro e √∫ltimo pre√ßo da sequ√™ncia da pilha para o array "states_BTC_price" 
            botStatus.states_BTC_price.append(botStatus.pilha[-1])
            if botStatus.states_BTC_price:
                # Isso ir√° exibir essas inform√ß√µes do 
                await ctx.send(f">>> Primeiro Pre√ßo: {botStatus.states_BTC_price[0]}\nUltimo pre√ßo: {botStatus.states_BTC_price[-1]}")
            else:
                await ctx.send("Nenhum pre√ßo de Bitcoin armazenado ainda.")
        else:
            await ctx.send('>>> Command not invalid')
        # No final limpamos a pilha e o array para n√£o ter lixo na proxima ativa√ß√£o  
        botStatus.states_BTC_price.clear()
        botStatus.pilha.clear()
    except Exception as e:
        await ctx.send(f'<{e}> Tente Novamente!')


@initialSettings.bot.command(name='segredo', help="Emvia uma mensagem no privado")
async def secret(ctx):
    try:
        await ctx.author.send('200pp vem nunca??')
    except initialSettings.discord.errors.Forbidden:
        # A exe√ß√£o forbidden ocorre quando o usu√°rio desativo as mensagens diretas
        # nesse cado enviaremos um aviso para ativar
        await ctx.send(
            'Por favor ative as mensagens diretas dos membros do servidor em:'
            '\nConfigura√ß√£es de Usu√°rios > Privacidade e seguran√ßa >' 
            ' Permitir mensagens diretas de membros do servidor'
        )


@initialSettings.bot.event
async def on_reaction_add(reaction, user):
    # Pegar os id do cargo e salvar em uma variavel
    # role_happy = user.guild.get_role(1236433934515044382)
    # role_bad = user.guild.get_role(1236434116140990654)

    if reaction.emoji == 'üëç':
        # Add e remove para adicionar esse cargo
        await user.add_roles(role_happy)
        await user.remove_roles(role_bad)
    elif reaction.emoji == 'üí©':
        await user.add_roles(role_bad)
        await user.remove_roles(role_happy)


@initialSettings.bot.command(name='image', help="ir√° emviar embed com imagens aleat√≥rias")
async def get_random_image(ctx):
    # o embed √© uma caixa de mensagem do discord onde tem titulo, descri√ß√£o, imagens e fields 
    url_image = "https://picsum.photos/1920/1080" 
    # Nesse caso para a imagens ser√° usado o API de imagens aleat√≥rias
    
    embed_image = initialSettings.discord.Embed(
        title="Resultado da busca da imagem",
        description="Essa busca √© totalmente aleat√≥ria",
        color=0x0000ff
    )

    embed_image.set_author(
        name=initialSettings.bot.user.name,
        icon_url=initialSettings.bot.user.avatar
    )

    embed_image.set_footer(
        text="Feito por " + initialSettings.bot.user.name,
        icon_url=initialSettings.bot.user.avatar
    )

    embed_image.set_image(url=url_image)

    embed_image.add_field(
        name="API", 
        value="API usada: https://picsum.photos"
    )

    embed_image.add_field(
        name="Par√¢metros",
        value="{largura}/{altura}"
    )

    embed_image.add_field(
        name="Exemplo: ",
        value=url_image,
        inline=False
    )

#   nesse caso o "send()" ter√° um argumento pr√≥prio para embed
    await ctx.send(embed=embed_image)


@initialSettings.bot.command(name="nameDev", help="Vai pegar o nome do desenvolvedor")
async def get_name_dev(ctx):
    # Essa fun√ß√£o assincrona so ir√° pegar meu nome de usu√°rio do discord e avatar
    # dev = await initialSettings.bot.fetch_user(botData.ID_USER)
    # Se usa "fetch_user()" para user que n√£o estiver no hist√≥rico
    if dev is not None:
        await ctx.send(dev.name)
        await ctx.send(dev.avatar)
    else:
        print('Usu√°rio n√£o encontrado')


@initialSettings.bot.command(name="?help", help="Um guia mais detalhado dos comandos")
async def help(ctx):

    embed_help_message = initialSettings.discord.Embed(
        title='O comando "!?help" ir√° ajudar com um guia abaixo.',
        description="O Fuyuka Akiyoshi Bot foi criado com o intuito de estudo,"
        " todos os comando s√£o testes para ver o comportamento do bot.",
        color=0xadd8e6
    )

    # dev = await initialSettings.bot.fetch_user(botData.ID_USER)
    
    embed_help_message.set_footer(
        text="Feito por " + dev.name,
        icon_url=dev.avatar
    )

    embed_help_message.add_field(
        name="Comando: /code", 
        value=
            "O comando √© usado para formatar o c√≥digo do campo de texto nornal,"
            " se escreve '!/code' e o bot pedir√° a baixo o seu c√≥digo."
    )

    embed_help_message.add_field(
        name="Comando: binance",
        value="O Comando servir√° para ver o valor de um criptmoeda comparado com uma moeda,"
        " se escreve '!binance' e junto os par√¢metros: Coin/Base."
    )


    embed_help_message.add_field(
        name="Comando: calculate",
        value="O Comando servir√° para calcular um valor sequindo a biblioteca math e os c√≥digos nativos do python,"
        " se escreve '!calculate ' e os par√¢metros communs s√£o +, -, *, /, //, **. Para mais informa√ß√£oes do math: https://docs.python.org/3/library/math.html"
    )

    embed_help_message.add_field(
        name="Comando: formPascal", 
        value=
            "O comando √© usado para formar um tri√¢ngulo de Pascal,"
            " se escreve '!formPascal' junto com a base como par√¢metro para mais"
            "informa√ß√£oes: https://jwilson.coe.uga.edu/EMAT6680Su12/Berryman/6690/BerrymanK-Pascals/BerrymanK-Pascals.html"
    )

    embed_help_message.add_field(
        name="Comando: help", 
        value=
            "Al√©m do comando '!?help' que √© mais completo o '!help' √© uma vers√£o padr√£o que ir√° mostrar mensagens simples"
    )

    embed_help_message.add_field(
        name="Comando: image", 
        value=
            "O comando '!image' ir√° exibir em uma embed imagens aleat√≥rias."
    )

    embed_help_message.add_field(
        name="Comando: nameDev", 
        value=
            "O comando '!nameDev' ir√° exibir em o nome e o avatar do desenvolvedor do bot."
    )

    embed_help_message.add_field(
        name="Comando: segredo", 
        value=
            "O comando '!segredo 'enviar√° um mensagem no privado de quem utilizar o comando."
    )

    embed_help_message.add_field(
        name="Comando: varia√ß√£oBitcoin", 
        value=
            "O comando '!varia√ß√£oBitcoin' ir√° utilizar ficar verificando o pre√ßo Bitcoin, e ir√° ficar retornado em um loop esses valores."
            "Al√©m disso ter√° o '!varia√ß√£oBitcoin start' para come√ßar o loop e '!varia√ß√£oBitcoin stop' para parar o loop, e no final"
            "ir√° exibir o pe√ßo inicial da bitcoin e o pre√ßo final ap√≥s a parada."
    )

    embed_help_message.add_field(
        name="Comando: verificarLocalBot", 
        value=
            "O comando '!verificarLocalBot' enviar√° um mensagem mostrando o Sistema Operacional local de onde o c√≥digo do bot est√° sendo rodado. "
    )

    await ctx.send(embed=embed_help_message)


# o m√©todo run usara o token do bot como par√¢metro
initialSettings.bot.run(initialSettings.TOKEN_bot_env)
